{"version":3,"sources":["Components/Header/Header.jsx","Components/LaunchCard/LaunchCard.jsx","Components/LaunchOptionsBar/LaunchOptionsBar.jsx","apiCalls.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","toolbar","display","flexDirection","justifyContent","alignItems","search","position","borderRadius","shape","backgroundColor","fade","palette","common","white","marginLeft","width","breakpoints","up","spacing","searchIcon","padding","height","pointerEvents","inputRoot","color","inputInput","paddingLeft","transition","transitions","create","Header","darkMode","toggleDarkMode","classes","style","flexGrow","AppBar","Toolbar","className","Typography","variant","Switch","checked","onChange","name","inputProps","root","margin","media","paddingTop","maxWidth","expand","transform","duration","short","expandOpen","table","marginBottom","LaunchCard","launch","React","useState","expanded","setExpanded","net","missions","rocket","probability","location","tbddate","tbdtime","Card","CardHeader","title","subheader","action","vidURLs","length","href","target","rel","IconButton","aria-label","fontSize","failreason","CardContent","CardActions","disableSpacing","clsx","onClick","aria-expanded","Collapse","in","timeout","unmountOnExit","paragraph","description","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","TableBody","scope","familyname","configuration","pads","status","LaunchOptionsBar","setTimeFrame","setNumResults","numResults","active","setActive","buttonContainer","marginTop","formControl","minWidth","justifySelf","selectEmpty","ToggleButtonGroup","value","exclusive","event","newActive","ToggleButton","FormControl","InputLabel","Select","labelId","id","e","MenuItem","getUpcomingLaunches","num","a","fetch","response","ok","json","launches","Error","getPastLaunches","windowStart","windowEnd","App","state","upcomingLaunches","pastLaunches","error","loading","timeframe","componentDidMount","getTodaysDate","getOneMonthBackDate","localStorage","getItem","localThemePrefs","JSON","parse","setTimeout","setState","console","log","setItem","toggleLaunchTimeFrames","bool","today","Date","day","getDate","month","getMonth","year","getFullYear","date","setMonth","renderUpcomingLaunches","map","i","Grid","item","direction","xs","md","lg","key","slice","renderPastLaunches","this","createMuiTheme","type","primary","main","contrastText","background","paper","default","typography","h1","red","fontFamily","ThemeProvider","container","justify","CircularProgress","Component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.53c62747.chunk.js","sourcesContent":["import React from 'react';\nimport SearchIcon from '@material-ui/icons/Search';\n\nimport { Switch } from '@material-ui/core';\nimport { fade, makeStyles, Typography, AppBar, Toolbar, InputBase, Grid } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n  toolbar: {\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n  },\n  search: {\n    display: 'inline-flex',\n    position: 'relative',\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: fade(theme.palette.common.white, 0.15),\n    '&:hover': {\n      backgroundColor: fade(theme.palette.common.white, 0.25),\n    },\n    // marginRight: theme.spacing(2),\n    marginLeft: 0,\n    width: '100%',\n    [theme.breakpoints.up('sm')]: {\n      marginLeft: theme.spacing(3),\n      width: 'auto',\n    },\n    justifySelf: 'center',\n    alignSelf: 'center',\n  },\n  searchIcon: {\n    padding: theme.spacing(0, 2),\n    height: '100%',\n    position: 'absolute',\n    pointerEvents: 'none',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  inputRoot: {\n    color: 'inherit',\n  },\n  inputInput: {\n    padding: theme.spacing(1, 1, 1, 0),\n    paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n    transition: theme.transitions.create('width'),\n    width: '100%',\n    [theme.breakpoints.up('md')]: {\n      width: '20ch',\n    },\n  },\n}));\n\nexport default function Header({ darkMode, toggleDarkMode }) {\n  const classes = useStyles();\n  return (\n    <header style={{flexGrow: 1}}>\n      <AppBar position=\"static\">\n        <Toolbar className={classes.toolbar}>\n          <Typography variant=\"h1\">Launch Master</Typography>\n          {/* <div className={classes.search}>\n            <div className={classes.searchIcon}>\n              <SearchIcon />\n            </div>\n            <InputBase\n              placeholder=\"Search…\"\n              classes={{\n                root: classes.inputRoot,\n                input: classes.inputInput,\n              }}\n              inputProps={{ 'aria-label': 'search' }}\n            />\n          </div> */}\n          <div>\n            <Typography style={{ display: 'inline'}}>Light</Typography>\n            <Switch\n              checked={darkMode}\n              onChange={() => toggleDarkMode()}\n              color=\"secondary\"\n              name=\"darkmode-toggle\"\n              inputProps={{ 'aria-label': 'dark mode checkbox' }}\n            />\n            <Typography style={{ display: 'inline' }} color=\"secondary\">Dark</Typography>\n          </div>\n        </Toolbar>\n      </AppBar>\n    </header>\n  );\n}\n","import React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {\n  Card,\n  CardHeader,\n  CardMedia,\n  CardContent,\n  CardActions,\n  Collapse,\n  IconButton,\n  Typography,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n} from '@material-ui/core';\n\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport VideoCam from '@material-ui/icons/Videocam';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    margin: '10px 0px',\n  },\n  media: {\n    height: 0,\n    paddingTop: '56.25%', // 16:9\n    borderRadius: 4,\n    maxWidth: '300px',\n  },\n  expand: {\n    transform: 'rotate(0deg)',\n    marginLeft: 'auto',\n    transition: theme.transitions.create('transform', {\n      duration: theme.transitions.duration.short,\n    }),\n  },\n  expandOpen: {\n    transform: 'rotate(180deg)',\n  },\n  table: {\n    marginBottom: theme.spacing(3),\n  }\n}));\n\nexport default function LaunchCard({ launch }) {\n  const classes = useStyles();\n  const [expanded, setExpanded] = React.useState(false);\n  const { name, net, missions, rocket, probability, location, tbddate, tbdtime } = launch;\n\n  const handleExpandClick = () => {\n    setExpanded(!expanded);\n  };\n\n  return (\n    <Card className={classes.root}>\n      <CardHeader\n        title={name}\n        subheader={(tbddate === 1 || tbdtime === 1) ? `Unconfirmed: ${net}`: net}\n        action={launch.vidURLs.length > 0 ? (\n          <a href={launch.vidURLs[0]} target=\"_blank\" rel=\"noopener noreferrer\">\n            <IconButton aria-label=\"watch live\">\n              <VideoCam fontSize=\"large\"/>\n            </IconButton>\n          </a>\n        ): null}\n      />\n      {launch.failreason && (\n        <CardContent>\n          <Typography>\n            {launch.failreason}\n          </Typography>\n        </CardContent>\n      )}\n      <CardActions disableSpacing>\n        <IconButton\n          className={clsx(classes.expand, {\n            [classes.expandOpen]: expanded,\n          })}\n          onClick={handleExpandClick}\n          aria-expanded={expanded}\n          aria-label=\"show more\"\n        >\n          <ExpandMoreIcon />\n        </IconButton>\n      </CardActions>\n      <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n        <CardContent>\n          {probability > 0 && (\n            <Typography paragraph>\n              {probability}% Chance of Launch\n            </Typography>\n          )}\n          {missions.length > 0 ? (\n            <Typography paragraph>\n              {missions[0].description}\n            </Typography>\n          ): (\n            <Typography paragraph>No description available</Typography>\n          )}\n        </CardContent>\n        <TableContainer component={Paper}>\n          <Table className={classes.table} aria-label=\"Launch Information\">\n            <TableHead>\n              <TableRow>\n                <TableCell>Rocket Name</TableCell>\n                <TableCell>Configuration</TableCell>\n                <TableCell>Launch Location</TableCell>\n                <TableCell>Status</TableCell>\n                <TableCell>Date</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              <TableRow>\n                <TableCell component=\"th\" scope=\"row\">\n                  {rocket.familyname}\n                </TableCell>\n                <TableCell>{rocket.configuration ? rocket.configuration: 'Uknown'}</TableCell>\n                <TableCell>{location.pads.length > 0 ? location.pads[0].name: location.name}</TableCell>\n                <TableCell>{launch.status === 1 ? 'Green': launch.status ===2 ? 'Red': launch.status === 3 ? 'Succeeded' : 'Failed'}</TableCell>\n                <TableCell>{net}</TableCell>\n              </TableRow>\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </Collapse>\n    </Card>\n  );\n}","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { FormControl, InputLabel, Select, MenuItem } from '@material-ui/core';\nimport ToggleButton from '@material-ui/lab/ToggleButton';\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\n\nexport default function LaunchOptionsBar({ setTimeFrame, setNumResults, numResults }) {\n  const [active, setActive] = React.useState('upcoming');\n\n  const useStyles = makeStyles((theme) => ({\n    buttonContainer: {\n      display: 'flex',\n      justifyContent: 'center',\n      marginTop: theme.spacing(4), \n    },\n    formControl: {\n      margin: theme.spacing(1),\n      minWidth: 120,\n      justifySelf: 'flex-end',\n    },\n    selectEmpty: {\n      marginTop: theme.spacing(2),\n    },\n  }));\n\n  const handleActive = (event, newActive) => {\n    setActive(newActive);\n  }\n\n  const handleNumResults = (e) => {\n    setNumResults(e.target.value);\n  }\n\n  const classes = useStyles();\n  return (\n    <div className={classes.buttonContainer} aria-label=\"select upcoming launches or past launches\">\n      <ToggleButtonGroup\n        value={active}\n        exclusive\n        onChange={handleActive}\n        aria-label=\"past or upcoming launch selection\"\n      >\n        <ToggleButton value=\"upcoming\" aria-label=\"upcoming launches\" onClick={() => setTimeFrame(false)}>\n          Upcoming\n        </ToggleButton>\n        <ToggleButton value=\"past\" aria-label=\"past launches\" onClick={() => setTimeFrame(true)}>\n          Past\n        </ToggleButton>\n      </ToggleButtonGroup>\n      {active === 'upcoming' ? (\n        <FormControl variant=\"filled\" className={classes.formControl}>\n          <InputLabel>Results</InputLabel>\n          <Select\n            labelId=\"filled-label\"\n            id=\"select-filled\"\n            value={numResults}\n            onChange={handleNumResults}\n          >\n            <MenuItem value={10}>10</MenuItem>\n            <MenuItem value={25}>25</MenuItem>\n            <MenuItem value={50}>50</MenuItem>\n          </Select>\n        </FormControl>\n      ): null}\n    </div>\n  );\n}\n","export const getUpcomingLaunches = async (num) => {\n  try {\n    const response = await fetch(`https://launchlibrary.net/1.3/launch/next/${num}`);\n    if(response.status === 200 || !response.ok) {\n      const launches = await response.json();\n      return launches;\n    }\n  } catch(e) {\n    return new Error('There was a problem fetching upcoming launches');\n  }\n}\n\nexport const getPastLaunches = async (windowStart, windowEnd) => {\n  try {\n    const response = await fetch(`https://launchlibrary.net/1.3/launch/${windowStart}/${windowEnd}`);\n\n    if(response.status === 200 || !response.ok) {\n      const launches = await response.json();\n      return launches;\n    }\n  } catch(e) {\n    return new Error('There was a problem retrieving past launches');\n  }\n}","import React from 'react';\nimport Header from './Components/Header/Header';\nimport LaunchCard from './Components/LaunchCard/LaunchCard';\nimport LaunchOptionsBar from './Components/LaunchOptionsBar/LaunchOptionsBar';\n\nimport { Grid, createMuiTheme, ThemeProvider, Typography, CircularProgress } from '@material-ui/core';\nimport { red } from '@material-ui/core/colors';\nimport { getUpcomingLaunches, getPastLaunches } from './apiCalls';\n\nclass App extends React.Component {\n  state = {\n    upcomingLaunches: null,\n    pastLaunches: null,\n    darkMode: false,\n    error: null,\n    loading: true,\n    timeframe: false,\n    numResults: 10,\n  };\n\n  componentDidMount = async () => {\n    try {\n      const windowEnd = this.getTodaysDate();\n      const windowStart = this.getOneMonthBackDate();\n      const upcomingLaunches = await getUpcomingLaunches(50);\n      const pastLaunches = await getPastLaunches(windowStart, windowEnd);\n      const localThemePrefs = await localStorage.getItem('darkMode');\n      const darkMode = localThemePrefs ? JSON.parse(localThemePrefs): false;\n      \n      setTimeout(() => {\n        this.setState({\n          upcomingLaunches,\n          pastLaunches,\n          darkMode,\n          loading: false,\n        });\n      }, 1000);\n    } catch(e) {\n      console.log(e);\n      this.setState({ error: e, loading: false });\n    }\n  }\n\n  toggleDarkMode = async () => {\n    const { darkMode } = this.state;\n    await localStorage.setItem('darkMode', !darkMode);\n    this.setState({ darkMode: !darkMode });\n  }\n\n  toggleLaunchTimeFrames = () => {\n    this.setState({ timeframe: !this.state.timeframe});\n  }\n\n  setTimeFrame = (bool) => {\n    this.setState({ timeframe: bool });\n  }\n\n  setNumResults = (num) => {\n    this.setState({ numResults: num });\n  }\n\n  getTodaysDate = () => {\n    const today = new Date();\n    let day = today.getDate();\n    let month = today.getMonth() + 1;\n    const year = today.getFullYear();\n    \n    if(day < 10) {\n      day = `0${day}`;\n    }\n\n    if(month < 10) {\n      month = `0${month}`;\n    }\n\n    return `${year}-${month}-${day}`;\n  }\n\n  getOneMonthBackDate = () => {\n    const date = new Date();\n    date.setMonth(date.getMonth() -1);\n    let month = date.getMonth() + 1;\n    const year = date.getFullYear();\n\n    if(month < 10){\n      month = `0${month}`;\n    }\n    return `${year}-${month}-01`;\n  }\n\n  renderUpcomingLaunches = () => {\n    const { upcomingLaunches, numResults } = this.state;\n\n    if(upcomingLaunches) {\n      const launchCards = upcomingLaunches.launches.map((launch, i) => {\n        return (\n          <Grid item direction=\"column\" xs={12} md={10} lg={8} key={launch.name}>\n            <LaunchCard launch={launch}/>\n          </Grid>\n        );\n      });\n      return launchCards.slice(0, numResults);\n    } else {\n      return <h1>We couldn't find any upcoming launches...</h1>;\n    }\n  }\n\n  renderPastLaunches = () => {\n    const { pastLaunches } = this.state;\n\n    if(pastLaunches) {\n      return pastLaunches.launches.map((launch) => {\n        return (\n          <Grid item direction=\"column\" xs={12} md={10} lg={8} key={launch.name}>\n            <LaunchCard launch={launch}/>\n          </Grid>\n        );\n      });\n    } else {\n      return <h1>We couldn't find any past launches...</h1>;\n    }\n  }\n  \n  \n  render() {\n    const { darkMode, loading, timeframe, numResults } = this.state;\n\n    const theme = createMuiTheme({\n      palette: {\n        type: darkMode ? 'dark': 'light',\n        primary: {\n          main: darkMode ? '#000': '#3f51b5',\n          contrastText: darkMode ? '#000': '#fafafa',\n        },\n        background: {\n          paper: darkMode ? '#000': '#fff',\n          default: darkMode ? '#000': '#fafafa',\n        }\n      },\n      typography: {\n        h1: {\n          color: darkMode ? red[400]: '#fff',\n          fontFamily: 'Pacifico, Roboto',\n          fontSize: 48,\n        }\n      }\n    });\n\n    return (\n      <ThemeProvider theme={theme}>\n        <main style={{ backgroundColor: darkMode ? '#000': '#fafafa' }}>\n          <Header toggleDarkMode={this.toggleDarkMode} darkMode={darkMode}/>\n            <LaunchOptionsBar setTimeFrame={this.setTimeFrame} setNumResults={this.setNumResults} numResults={numResults}/>\n            <Grid\n              container\n              justify=\"center\"\n              alignItems=\"center\"\n              style={{ padding: '20px 0px'}}\n            >\n              { loading ? <CircularProgress color=\"inherit\" /> : timeframe ? this.renderPastLaunches() : this.renderUpcomingLaunches()}\n            </Grid>\n        </main>\n      </ThemeProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}